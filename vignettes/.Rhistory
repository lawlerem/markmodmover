Interpolated.Groups<- lapply(names(Interpolated.Groups),
function(name) {
group<- Interpolated.Groups[[name]]
group$Group<- rep(as.integer(name),nrow(group))
return(group)
}
)
Interpolated.Locations<- do.call(rbind.data.frame,Interpolated.Groups)
Interpolated.Locations$Group<- as.factor(Interpolated.Locations$Group)
Data.4M@Interpolated.Locations<- Interpolated.Locations
Movement.Data<- by(Interpolated.Locations,
INDICES = Interpolated.Locations$Group,
function(group) {
Deflection.Angle<- sapply(2:(nrow(group)-1),
function(t) .deflection.angle.formula(x.last = group[t-1,],
x.curr = group[t,],
x.next = group[t+1,],
lat = 3,
lon = 2)
)
Step.Length<- sapply(1:(nrow(group)-1),
function(t) .distance.formula(x.last = group[t,],
x.curr = group[t+1,],
lat = 3,
lon = 2))
return(data.frame(Deflection.Angle = c(NA,Deflection.Angle),
Step.Length = Step.Length,
Group = group$Group[[1]]))
}
)
Data.4M@Movement.Data$Step.Length.Mean<- mean(unlist(lapply(Movement.Data,
function(group) {
return(group$Step.Length)
}
)))
Data.4M@Movement.Data$Step.Length.Starting.Values<- unlist(lapply(Movement.Data,
function(group) {
return(group$Step.Length[[1]] / Data.4M@Movement.Data$Step.Length.Mean)
}))
Movement.Data<- do.call(rbind.data.frame,
lapply(Movement.Data,
function(group) {
return(group[-1,])
})
)
Movement.Data[,"Step.Length"]<- Movement.Data[,"Step.Length"] / Data.4M@Movement.Data$Step.Length.Mean
Data.4M@Movement.Data$Movement.Data<- Movement.Data
return(Data.4M)
}
SetModel<- function(Model.4M,
nStates,
Use.HMM = FALSE,
Distribution = 1L,
Zero.Inflation = c(
Deflection.Angle = FALSE,
Step.Length = FALSE
),
...) {
if( class(Model.4M) != "Model.4M" ) {
stop("Model.4M must be of class Model.4M.")
}
if(
(
any(as.matrix(Model.4M@Parameter.Estimates$Deflection.Angle.Parameters) != 0) ||
any(as.matrix(Model.4M@Parameter.Estimates$Step.Length.Parameters) != 0) ||
any(as.matrix(Model.4M@Parameter.Estimates$Transition.Probability.Matrix) != 0) ||
any(as.matrix(Model.4M@Parameter.Estimates$Stationary.Distribution) != 0)
) && interactive() == T
) {
answer<- readline("Changing the model will erase previous parameter estimates, AIC, residuals, and Viterbi path. Continue? [y/n] ")
while( !(answer %in% c("y","n")) ) {
answer<- readline("Changing the model will erase previous parameter estimates, AIC, residuals, and Viterbi path. Continue? [y/n] ")
}
if( answer == "n" ) {
stop("SetModel aborted.")
}
}
if( nStates < 2) {
stop("The number of states must be at least 2.")
}
Model.4M@nStates<- as.integer(nStates)
Model.4M@Use.HMM<- Use.HMM
Model.4M@Distribution<- as.integer(Distribution)
if( length(Zero.Inflation) != 2 || any( !(names(Zero.Inflation) %in% c("Deflection.Angle","Step.Length") ) ) ){
stop("Zero.Inflation must be a logical vector of length two with names \"Deflection.Angle\" and \"Step.Length\".")
}
Model.4M@Zero.Inflation<- Zero.Inflation
Model.4M@Starting.Values$tpm_working_pars_matrix<- matrix(NA,
nrow= nStates,
ncol = nStates)
Model.4M@Starting.Values$theta_working_pars<- matrix(NA,
nrow = nStates,
ncol = 2)
Model.4M@Starting.Values$dist_working_pars<- matrix(NA,
nrow = nStates,
ncol = 2)
Model.4M@Starting.Values$acf_working_pars<- rep(NA,nStates)
Model.4M@Starting.Values$logit_step_zero_probs<- rep(NA,nStates)
Model.4M@Starting.Values$logit_angle_zero_probs<- rep(NA,nStates)
Model.4M@Starting.Values$angle_zero_working_pars<- matrix(NA,
nrow = nStates,
ncol = 2)
Model.4M@Parameter.Estimates$Deflection.Angle.Parameters<- data.frame(Center = numeric(nStates),
Concentration = numeric(nStates))
Model.4M@Parameter.Estimates$Step.Length.Parameters<- data.frame(Intercept = numeric(nStates),
Autocorrelation = numeric(nStates),
Standard.Deviation = numeric(nStates))
Model.4M@Parameter.Estimates$Transition.Probability.Matrix<- matrix(numeric(nStates^2),
nrow = nStates,
ncol = nStates)
Model.4M@Parameter.Estimates$Stationary.Distribution<- numeric(nStates)
Model.4M@Parameter.Estimates$Zero.Inflation<- list(
Step.Zero.Probs = numeric(nStates),
Angle.Zero.Probs = numeric(nStates),
Angle.Zero.Pars = data.frame(Center = numeric(nStates),
Concentration = numeric(nStates))
)
Model.4M@AIC<- numeric(0)
Model.4M@OSA.Residuals<- data.frame(Deflection.Angle = numeric(0),
Step.Length = numeric(0))
Model.4M@Viterbi.Path<- integer(0)
Model.4M@Convergence<- character(0)
return(Model.4M)
}
StartingValues<- function(Model.4M,
tpm_working_pars_matrix = NA,
theta_working_pars = NA,
dist_working_pars = NA,
acf_working_pars = NA,
logit_step_zero_probs = NA,
logit_angle_zero_probs = NA,
angle_zero_working_pars = NA,
...) {
if( class(Model.4M) != "Model.4M" ) {
stop("Model.4M must be of class Model.4M.")
}
n_states<- Model.4M@nStates
if( !(length(tpm_working_pars_matrix) == 1 && is.na(tpm_working_pars_matrix)) &&
dim(tpm_working_pars_matrix) != c(n_states,n_states) ) {
stop("tpm_working_pars_matrix must be NA or a nStates X nStates square matrix.")
}
if( !(length(theta_working_pars) == 1 && is.na(theta_working_pars)) &&
dim(theta_working_pars) != c(n_states,2) ) {
stop("theta_working_pars must be NA or a nStates X 2 matrix.")
}
if( !(length(dist_working_pars) == 1 && is.na(dist_working_pars)) &&
dim(dist_working_pars) != c(n_states,2) ) {
stop("dist_working_pars must be NA or a nStates X 2 matrix.")
}
if( !(length(acf_working_pars) == 1 && is.na(acf_working_pars)) &&
length(acf_working_pars) != n_states ) {
stop("acf_working_pars must be NA or a vector of length nStates.")
}
if( !(length(logit_step_zero_probs) == 1 && is.na(logit_step_zero_probs)) &&
length(logit_step_zero_probs) != n_states ) {
stop("logit_step_zero_prob must be NA or a vector of length nStates")
}
if( !(length(angle_zero_working_pars) == 1 && is.na(angle_zero_working_pars)) &&
dim(angle_zero_working_pars) != c(n_states,2) ) {
stop("angle_zero_working_pars must be NA or a nStates X 2 matrix.")
}
if( length(tpm_working_pars_matrix) == 1 && is.na(tpm_working_pars_matrix) ) {
tpm_working_pars_matrix<- matrix(NA,
nrow = n_states,
ncol = n_states)
}
if( length(theta_working_pars) == 1 && is.na(theta_working_pars) ) {
theta_working_pars<- matrix(NA,
nrow = n_states,
ncol = 2)
}
if( length(dist_working_pars) == 1 && is.na(dist_working_pars) ) {
dist_working_pars<- matrix(NA,
nrow = n_states,
ncol = 2)
}
if( length(acf_working_pars) == 1 && is.na(acf_working_pars) ) {
acf_working_pars<- rep(NA,n_states)
}
if( length(logit_step_zero_probs) == 1 && is.na(logit_step_zero_probs) ) {
logit_step_zero_probs<- rep(NA,n_states)
}
if( length(logit_angle_zero_probs) == 1 && is.na(logit_angle_zero_probs) ) {
logit_angle_zero_probs<- rep(NA,n_states)
}
if( length(angle_zero_working_pars) == 1 && is.na(angle_zero_working_pars) ) {
angle_zero_working_pars<- matrix(NA,
nrow = n_states,
ncol = 2)
}
Model.4M@Starting.Values$tpm_working_pars_matrix<- as.matrix(tpm_working_pars_matrix)
Model.4M@Starting.Values$theta_working_pars<- as.matrix(theta_working_pars)
Model.4M@Starting.Values$dist_working_pars<- as.matrix(dist_working_pars)
Model.4M@Starting.Values$acf_working_pars<- as.vector(acf_working_pars)
Model.4M@Starting.Values$logit_step_zero_probs<- as.vector(logit_step_zero_probs)
Model.4M@Starting.Values$logit_angle_zero_probs<- as.vector(logit_angle_zero_probs)
Model.4M@Starting.Values$angle_zero_working_pars<- as.matrix(angle_zero_working_pars)
return(Model.4M)
}
###
### Hidden Functions
###
.r.Earth<- 6371
.distance.formula<- function(x.last,x.curr,lat = 1,lon = 2, convert.to.radians = TRUE) {
if(lat == lon) warning("Latitude index same as Longitude index")
if(convert.to.radians == TRUE) {
x.curr[[lat]]<- (pi/180)*x.curr[[lat]]
x.curr[[lon]]<- (pi/180)*x.curr[[lon]]
x.last[[lat]]<- (pi/180)*x.last[[lat]]
x.last[[lon]]<- (pi/180)*x.last[[lon]]
}
inner.first<- sin(0.5*(x.curr[[lat]]-x.last[[lat]]))^2
inner.second<- cos(x.curr[[lat]])*cos(x.last[[lat]])
inner.third<- sin(0.5*(x.curr[[lon]]-x.last[[lon]]))^2
dist<- 2*.r.Earth*asin(sqrt(inner.first+inner.second*inner.third))
return(dist)
}
.heading.formula<- function(x.last, x.curr, lat = 1, lon = 2, convert.to.radians = TRUE) {
if(lat == lon) warning("Latitude index same as Longitude index")
if(convert.to.radians == TRUE) {
x.curr[[lat]]<- (pi/180)*x.curr[[lat]]
x.curr[[lon]]<- (pi/180)*x.curr[[lon]]
x.last[[lat]]<- (pi/180)*x.last[[lat]]
x.last[[lon]]<- (pi/180)*x.last[[lon]]
}
atan.arg1<- sin(x.curr[[lon]] - x.last[[lon]])*cos(x.curr[[lat]])
atan.arg2<- cos(x.last[[lat]])*sin(x.curr[[lat]]) - sin(x.last[[lat]])*cos(x.curr[[lat]])*cos(x.curr[[lon]] - x.last[[lon]])
heading<- 180/pi*atan2(atan.arg1, atan.arg2)
return(heading)
}
.deflection.angle.formula<- function(x.last, x.curr, x.next, lat = 1, lon = 2, convert.to.radians = TRUE) {
if(lat == lon) warning("Latitude index same as Longitude index")
if(convert.to.radians == TRUE) {
x.next[[lat]]<- (pi/180)*x.next[[lat]]
x.next[[lon]]<- (pi/180)*x.next[[lon]]
x.curr[[lat]]<- (pi/180)*x.curr[[lat]]
x.curr[[lon]]<- (pi/180)*x.curr[[lon]]
x.last[[lat]]<- (pi/180)*x.last[[lat]]
x.last[[lon]]<- (pi/180)*x.last[[lon]]
}
heading.initial<- .heading.formula(x.last = x.curr, x.curr = x.next, lat = lat, lon = lon, convert.to.radians = FALSE)
heading.final<- 180 + .heading.formula(x.last = x.curr, x.curr = x.last, lat = lat, lon = lon, convert.to.radians = FALSE)
#  heading.final<- heading.final - 360*floor((heading.final+180)/360)
deflection.angle<- heading.final - heading.initial
deflection.angle<- deflection.angle - 360*floor((deflection.angle+180)/360)
return(deflection.angle)
}
.dest.Point<- function(x.curr,f.heading.curr,distance.curr,deflection.angle,distance,del = NULL, lat = 1, lon = 2, convert.to.radians = TRUE){
if(convert.to.radians) {
f.heading.curr<- pi/180*f.heading.curr
deflection.angle<- pi/180*deflection.angle
x.curr[[lat]]<- pi/180*x.curr[[lat]]
x.curr[[lon]]<- pi/180*x.curr[[lon]]
}
if( !is.null(del) ) {
new.dist<- del*distance.curr
} else {
new.dist<- distance
}
new.heading<- f.heading.curr - deflection.angle
x.next.lat<- asin( sin(x.curr[[lat]])*cos(new.dist/.r.Earth) + cos(x.curr[[lat]])*sin(new.dist/.r.Earth)*cos(new.heading) )
x.next.lon<- x.curr[[lon]] + atan2( sin(new.heading)*sin(new.dist/.r.Earth)*cos(x.curr[[lat]]),
cos(new.dist/.r.Earth) - sin(x.curr[[lat]])*sin(x.next.lat))
x.next<- c(0,0)
x.next[[lat]]<- x.next.lat
x.next[[lon]]<- x.next.lon
return(180/pi*x.next)
}
seal87713data<- Data.4M(seal87713f)
seal87713data
View(seal87713f)
Data.4M(seal87713f[,c("date","lon","lat"])
Data.4M(seal87713f[,c("date","lon","lat")])
seal87713f$date<- as.character(seal87713f$date)
seal87713data<- Data.4M(seal87713f)
as.POSIXct(seal87713f$date)
colnames(seal87713f)[2:4]<- c("Date","Lat","Lon")
seal87713data<- Data.4M(seal87713f)
seal87713data
seal87713f$Date<- as.character(seal87713f$Date)
seal87713data<- Data.4M(seal87713f)
seal87713data
View(seal87713f)
seal87713f$Date<- as.POSIXct(as.character(seal87713f$Date))
seal87713data<- Data.4M(seal87713f)
seal87713data
plot(difftime(seal87713data),type = "l")
`87714f` <- read.csv("~/Downloads/Re%3a_Kouchibouguac_grey_seal/87714f.csv", stringsAsFactors=FALSE)
View(`87714f`)
rm(`87714f`)
seal87714f <- read.csv("~/Downloads/Re%3a_Kouchibouguac_grey_seal/87714f.csv", stringsAsFactors=FALSE)
View(seal87714f)
seal87714f$date<- as.POSIXct(seal87714f$date)
colnames(seal87714f)[2:4]<- c("Date","Lat","Lon")
seal87714data<- Data.4M(seal87714f)
plot.ts(difftime(seal87714data))
seal87715f <- read.csv("~/Downloads/Re%3a_Kouchibouguac_grey_seal/87715f.csv", stringsAsFactors=FALSE)
View(seal87715f)
seal87715f$date<- as.POSIXct(seal87715f$date)
colnames(seal87715f)[2:4]<- c("Date","Lat","Lon")
seal87715data<- Data.4M(seal87715f)
plot.ts(difftime(seal87714data))
plot.ts(difftime(seal87715data))
?setMethod
?setGeneric
setClass(Class = "person",
slots = c("name","age")
)
setMethod(f = "initialize",
signature = "person",
definition = function(.Object,name,age) {
name(.Object)<- name
age(.Object)<- age
return(.Object)
}
)
setGeneric(name = "name<-",
definition = function(x,value) standardGeneric("name<-"))
setGeneric(name = "name<-",
definition = function(x,value) standardGeneric("name<-")
)
setGeneric(name = "name<-",
def = function(x,value) standardGeneric("name<-")
)
setReplaceMethod(f = "name",
signature = "person",
definition = function(x,value) {
x@name<- value
return(x)
}
)
setGeneric(name = "age<-",
def = function(x,value) standardGeneric("age<-")
)
setReplaceMethod(f = "age",
signature = "person",
definition = function(x,value) {
x@age<- value
return(x)
}
)
new("person",name = "Anna",age = "37")
setClass(Class = "person",
slots = c("name" = list(),
"age")
)
setClass(Class = "person",
slots = c("name" = "list",
"age" = "numeric")
)
setMethod(f = "initialize",
signature = "person",
definition = function(.Object,name,age) {
name(.Object)<- name
age(.Object)<- age
return(.Object)
}
)
setGeneric(name = "name<-",
def = function(x,value) standardGeneric("name<-")
)
setReplaceMethod(f = "name",
signature = "person",
definition = function(x,value) {
x@name<- value
return(x)
}
)
setGeneric(name = "age<-",
def = function(x,value) standardGeneric("age<-")
)
setReplaceMethod(f = "age",
signature = "person",
definition = function(x,value) {
x@age<- value
return(x)
}
)
annie<- new("person",name = list("Anna"),age = 37)
name(annie)$yo<- 2
name(annie)<- 2
name(annie)<- list(2)
setReplaceMethod(f = "$",
signature = "person",
definition = function(x,name,value) {
slot(x@name)<- value
return(x)
})
annie$name$x<- 0
annie%name
annie$name
new("person")
length(NA)
length(NULL)
c(NULL,1)
c(NULL,1,2,3)
x<- NULL
x<- c(x,1)
x<- c("Hi","yo")
paste(x)
paste(x,sep = "\n")
x
error(x)
stop(x)
stop(paste(x,sep = "\n"))
do.call(paste,x,sep = "\n")
?do.call
do.call(paste,list(x = x,sep = "\n"))
?aste
?paste
do.call(paste,list(x = x,sep = " "))
stop(paste(x,sep = " ",collapse = " "))
stop(paste(x,sep = " ",collapse = "\n"))
stop(paste(x,collapse = "\n"))
class(matrix())
dim(c(1,2,3))
length(c(1,2,3))
install.packages("SAM")
q()
hi<- seq(4)
hi[]<- 0
hi<- 0
hi<- seq(4)
hi[]<- factor(NA)
hi
class(hi)
hi<- as.factor(hi)
hi<- seq(4)
hi[]<- as.factor(NA)
hi<- as.factor(seq(4))
hi[]<- NA
matrix(as.factor(seq(3^2)),
ncol = 3)
hi<- matrix(as.factor(seq(3^2)),
ncol = 3)
hi
hi[,2]<- NA
hi
summary(hi)
hi[]<- NA
summary(hi)
class(hi)
class(hi[1,1])
class(as.factor(NA))
hi<- as.factor(hi)
hi<- matrix(as.factor(seq(3^2)),
ncol = 3)
hi[]<- as.factor(NA)
hi<- matrix(as.factor(seq(3^2)),
ncol = 3)
class(hi[[1,1]])
hi
summary(hi)
require(TMB)
?MakeADFun
array(NA,dim = c(3,2))
as.factor(array(NA,dim = c(3,2)))
hi<- as.factor(array(NA,dim = c(3,2)))
hi[1,2]
hi<- list(array(seq(6),dim = c(3,2)),
array(seq(9),dim = c(3,3)))
hi
lapply(hi,as.factor)
hi[[1]][,2]<- NA
lapply(hi,as.factor)
q()
install.packages(c("digest", "viridisLite"))
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
?setClass
data4M<- setClass("Data4M",slots = c(x = "numeric",y = "character"))
data4M(x = 2,y = "hi")
q()
q()
install.packages("RcppEigen")
q()
q()
install.packages(c("knitr", "rlang", "stringr"))
q()
6 %% 3
1:0
c(1,2)[1:0]
c(1,2)[[0]]
install.packages("abind")
abind
require("abind")
abind
q()
load("~/Home/Research/Movement Ecology/Markov-modulated Movement Model/Code/DamienSealAnalysis.RData")
seal4M3
seal4M3@Interpolation.Parameters
1200/3600
install.packages("glmnet")
require(glmnet)
?glmnet
?model.matrix
10^(seq(10,-2,length = 100))
plot.ts(10^(seq(10,-2,length = 100)))
seq(10,-2,length = 100())
seq(10,-2,length = 100
)
?plot.glmnet
?model.matrix
?glmnet
install.packages(c("desc", "gdistance", "httpuv", "psych", "rjson", "stringi", "yaml"))
setwd("~/markmodmover/vignettes")
?Data4M
?Data4M-class
library(markmodmover)
?Data4M-class
?Data4M
??data4M
