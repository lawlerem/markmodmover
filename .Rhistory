seal4M2<- fit(sealdata)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")
seal4M2<- fit(sealdata)
setmodel<- SetModel4M()
?SetModel4M
?setModel4M
setmodel<- setModel4M()
seal4M2<- fit(sealdata,setmodel)
class(setmodel)
?SetModel4M
SetModel4M(setmodel)
?model4M
seal4M2<- model4M(sealdata,setmodel)
class(sealdata)
?as
as(setmodel,"SetModel4M")
new("Model4M",Data4M = sealdata,SetModel4M = setmodel)
new("Model4M")
seal4M2<- fit(sealdata,setmodel)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")
fit(seal4M2)
fit(sealdata)
?assign
library(markmodmover)
sealdata<-data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")
fit(sealdata)
library(markmodmover)
sealdata<-data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")
fit(sealdata)
object
model
model4M(object,model)
?as
hi<- new("Model4M")
as(hi,"SetModel4M")<- model
hi
as(hi,"Data4M")<- object
hi
as(hi,"SetModel4M")<- model
model4M(x = object,Set.Model = model)
model4M(x = object,Set.Model = model)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")\
sealdata<- interpolate(sealdata,Time.Step = 66,units = "min")
fit(sealdata)
install.packages("RcppArmadillo")
hi
hi<- fit(sealdata)
hi
str(hi)
?interpolate
?fit
?setModel4M
setModel4M(Use.HMM = T,N.States = 3)
?fit
library(markmodmover)
?fit
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
?simulate4M
sim4M2<- simulate(seal4M2,nsim = 5)
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,nsim = 5)
sim4M2<- simulate(seal4M2,nsim = 50)
sim4M2<- simulate(seal4M2,nsim = 50,keep.residuals = F)
refitConvergence(sim4M2)
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,nsim = 5)
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,nsim = 5)
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,nsim = 5)
hola
residuals(hola)
?residuals
?residuals4M
?residuals.4M
?AccessModel4M
str(hola)
hola@Residuals
?residuals
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,nsim = 5)
sim4M2
str(sim4M2)
library(markmodmover)
?`residuals,Model4M-method`
simulatedViterbiPath(sim4M2)
head(simulatedViterbiPath(sim4M2))
head(simulatedViterbiPath(sim4M2[,1:10]))
head(simulatedViterbiPath(sim4M2)[,1:10])
head(refitViterbiPath(sim4M2)[,1:10])
?fit
library(markmodmover)
?simulate.4M
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,N.Sim = 5)
sim4M2
rmse(sim4M2)
stateError(sim4M2)
rowMeans(simulatedViterbiPath(sim4M2) != refitViterbiPath(sim4M2))
simulatedViterbiPath(sim4M2) != refitViterbiPath(sim4M2)
library(markmodmover)
sealData<- data4M(greyseal)
sealData<- interpolate(sealData,Time.Step = 1)
seal4M2<- fit(sealData)
sim4M2<- simulate(seal4M2,N.Sim = 5)
stateError(sim4M2)
?simulate.4M
sim4M2<- simulate(seal4M2,nsim = 5)
stateError(sim4M2)
?simulationError
require(moveHMM)
?plot.moveHMM
?plot4M
library(markmodmover)
?plot4M
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
plot(sealdata,ask = F)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
plot(sealdata,ask = F)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
plot(sealdata,ask = F)
sealdata<- data4M(greyseal)
library(markmodmover)
sealdata<- interpolate(sealdata,Time.Step = 1)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
plot(sealdata,ask = F)
!(length(Test.Path == 1) && !is.na(Test.Path))
length(NA)
length(Test.Path)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
plot(sealdata,ask = F)
plot(sealdata,"data",log = T,lag = 2,N.Grid.Lines = 25,N.Greys = 2)
plot(sealdata,"data",log = T,lag = 2,N.Grid.Lines = 25,N.Greys = 10)
plot(sealdata,"data",log = T,lag = 2,N.Grid.Lines = 150,N.Greys = 30)
plot(sealdata,"locations",pch = 11,col = "red")
library(markmodmover)
?plot4M
seal4M3<- fit(sealdata,N.States = 3)
plot(seal4M3)
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
seal4M3<- fit(sealdata,N.States = 3)
plot(seal4M3,"Locations")
rm(hi,hola,model,object,seal4M2,sealData,setmodel,sim4M2,Test.Loc,Test.Locations)
length(Viterbi.Path)
is.na(Viterbi.Path)
anyNA(Viterbi.Path)
anyNA(NA)
!(length(Viterbi.Path == 1) || anyNA(Viterbi.Path))
c(length(Viterbi.Path == 1), anyNA(Viterbi.Path))
!((length(Viterbi.Path) == 1) || anyNA(Viterbi.Path))
hi<- NA
!((length(hi) == 1) || anyNA(hi))
rm(hi)
rm(Color.Path,Test.Path,Viterbi.Path)
?length.data.frame
library(markmodmover)
?plot4M
plot(seal4M3)
rm(Viterbi.Path,Color.Path)
?RColorBrewer
?plot4M
library(markmodmover)
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
seal4M3<- fit(sealdata,N.States = 3)
library(RColorBrewer)
plot(seal4M3,"locations",palette = "Dark2")
?rle
?split
?approx
?sweep
?slotNames
?stop
library(markmodmover)
?plot4M
sealdata<- data4M(greyseal)
sealdata<- interpolate(sealdata,Time.Step = 1)
seal4M3<- fit(sealdata,N.States = 3)
plot(seal4M3,"locations",palette = "Dark2")
detach("package:RColorBrewer", unload=TRUE)
library(markmodmover)
plot(seal4M3,"locations",palette = "Dark2")
library(markmodmover)
plot(seal4M3,"locations",palette = "Dark2")
remove.packages("RColorBrewer", lib="~/R/x86_64-pc-linux-gnu-library/3.4")
plot(seal4M3,"locations",palette = "Dark2")
library(markmodmover)
plot(seal4M3,"locations",palette = "Dark2")
library(markmodmover)
library(markmodmover)
library(markmodmover)
plot(seal4M3,"locations",palette = "Dark2")
requireNamespace("RColorBrewer")
.Last.value
?requireNamespace
plot(seal4M3,"locations",palette = "Dark2")
?kde2d
?image
?grey
install.packages("crawl")
require(crawl)
?crwPostIS
demo(northernFurSealDemo)
crawl::demo(northernFurSealDemo)
crawl:demo(northernFurSealDemo)
library(markmodmover)
example(simulate.4M)
simCheck(sim4M2)
library(markmodmover)
simCheck(sim4M2)
library(markmodmover)
simCheck(sim4M2)
library(markmodmover)
example(simulate.4M)
simCheck(sim4M2)
?debug
debug(simCheck(sim4M2))
debug(simCheck
)
simCheck(sim4M2)
library(markmodmover)
example(simulate.4M)
simCheck(sim4M2)
library(markmodmover)
simCheck(sim4M2)
?sapply
hi<- simCheck(sim4M2)
hi
hi[[1]]
hi[[2]]
library(markmodmover)
simCheck(sim4M2)
do.call(c,hi)
c(integer(0),integer(0))
do.call(c,do.call(c,hi))
hi
do.call(c,hi[[2]])
simCheck(sim4M2)
library(markmodmover)
simCheck(sim4M2)
library(markmodmover)
simCheck(sim4M2)
library(markmodmover)
library(markmodmover)
simCheck(sim4M2)
sim4M3<- fit(sealdata,N.States = 3\)
sim4M3<- fit(sealdata,N.States = 3)
sim4M3<- fit(sealData,N.States = 3)
sim4M3<- simulate(sim4M3,nsim = 10)
simCheck(sim4M3)
simCheck(sim4M3,1)
library(markmodmover)
simCheck(sim4M3,1)
simCheck(sim4M3,0,0)
sapply(1:2,function(x) return(x))
sapply(1:2,function(x) return(c(1,2)))
sapply(1:2,function(x) return(numeric(0))
)
sapply(1:2,function(x) return(1:x))
is.list(sapply(1:2,function(x) return(c(1,2))))
library(markmodmover)
simCheck(sim4M3)
library(markmodmover)
simCheck(sim4M3)
?unique
library(markmodmover)
simCheck(sim4M3)
sim4M3[-numeric(0)]
hi<- sim4M3[-numeric(0)]
refitParameters(hi)$Stationary.Distribution
hi<- data.frame(x = 1:2,y = 1:2)
hi[-numeric(0),]
-
-0
substitute(-0)
eval(substitute(-0))
hi<- substitute(-0)
hi
str(hi)
hi[[1]]
hi[[2]]
sim4M3[-0]
refitParameters(sim4M3[-0])$Stationary.Distribution
refitParameters(sim4M3)$Stationary.Distribution
refitParameters(sim4M3[-11])$Stationary.Distribution
hi[[1]]
numeric(0) == 0
hi[[1]] == `-`
deparse(hi[[1]]) == "-'"
deparse(hi[[1]]) == "-"
library(markmodmover)
substitute(-numeric(0))
substitute(-numeric(0))[[1]]
hi<- sim4M3[-numeric(0)]
library(markmodmover)
hi<- sim4M3[-numeric(0)]
hi
library(markmodmover)
hi<- sim4M3[-numeric(0)]
refitParameters(hi)$Stationary.Distribution
x<- 1:10
( x<- 1:10)
`()`
`( )`
`+`
`(`
`)`
`(`
?print
?`(`
?get
f<- get("(")
f
f()
str(f)
f[[1]]
f(a+2)
f(2+2)
f(invisible(2+2))
e<- expression(3+2*4)
View(f)
indentical(f(e),e)
identical(f(e),e)
(e)
(2+3)
{2+3; 4+5}
(2+3; 4+5)
(invisible(2+3))
{invisible(2+3)}
eval(e)
eval(f(e))
e
f(e)
(e)
identical((e),f(e))
identical(((e)),f(e))
identical(eval(e),f(e))
e
quote(e)
eval(quote(e))
eval(eval(quote(e)))
quote(eval(eval(quote(e))))
eval(quote(eval(eval(quote(e)))))
quote(eval(e))
eval(e)
quote(eval(e))
eval(quote(e))
eval((e))
?quote
?eval
(e)
quote((e))
eval(quote((e)))
(quote(e))
x<- array(1:8,dim = c(2,2,2))
x
x<- array(1:12,dim = c(2,2,3))
x
apply(x,MARGIN = 3,function(i) return(i))
apply(x,MARGIN = 3,function(i) {apply(i,MARGIN = 1,function(j) return(j))})
apply(x,MARGIN = 3,function(i) {apply(i,MARGIN = 1,function(j) return(j*min(j)))})
x<- array(1:12,dim = c(2,2,3))
apply(x,MARGIN = 3,function(i) {
apply(i,MARGIN = 1,function(j) {
print(j)
return(j)
})
})
x<- array(runif(12,0,1),dim = c(2,2,3))
x
apply(x,MARGIN = 3,function(i) {
apply(i,MARGIN = 1,function(j) {
return(j/sum(j))
})
})
apply(x,MARGIN = 3,function(i) {
apply(i,MARGIN = 1,function(j) {
if( any(j<0.25) ) {
return(TRUE)
} else {
return(FALSE)
}
})
})
x
apply(x,MARGIN = 3,function(i) {
apply(i,MARGIN = 1,function(j) {
if( any(j<0.25) ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(.Last.value)
})
x<- array(runif(12,0,1),dim = c(2,2,3))
apply(x,MARGIN = 3,function(i) {
TF<- apply(i,MARGIN = 1,function(j) {
if( any(j<0.25) ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(TF)
})
apply(x,MARGIN = 3,function(i) {
TF<- apply(i,MARGIN = 1,function(j) {
if( any(j<0.25) ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(any(TF))
})
x<- array(runif(4*10,0,1),dim = c(2,2,10))
apply(x,MARGIN = 3,function(i) {
TF<- apply(i,MARGIN = 1,function(j) {
if( any(j<0.25) ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(any(TF))
})
x
y<- apply(x,MARGIN = 3,function(i) {
TF<- apply(i,MARGIN = 1,function(j) {
if( j[[1]] > j[[2]] ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(any(TF))
})
y
x
y
round(x,1)
round(x,2)
Tpm<- refitParameters(sim4M3)$Transition.Probability.Matrix
Tpm
Tpm.R<- round(Tpm,2)
Tpm.Index<- apply(Tpm.R,MARGIN = 3,function(i) {
Row.Test<- apply(i,MARGIN = 1,function(j) {
if( anyDuplicated(j) ) {
return(TRUE)
} else {
return(FALSE)
}
})
return(any(Row.Test))
})
Tpm.Index
which(Tpm.Index)
Tpm.R
library(markmodmover)
?simCheck
simCheck(sim4M3)
library(markmodmover)
simCheck(sim4M3)
refitParameters(sim4M3[simCheck])$Stationary.Distribution
class(sim4M3)
refitParameters(sim4M3[simCheck(sim4M3)])$Stationary.Distribution
refitParameters(sim4M3[simCheck(sim4M3)])$Transition.Probability.Matrix
sim4M3<- sim4M3[-simCheck(sim4M3)]
summary(stateError(sim4M3))
stateError(sim4M3)
rmarkdown::render("vignettes/markmodmover.Rmd")
rmarkdown::render("vignettes/markmodmover.Rmd")
library(markmodmover)
??install_github
devtools::install_github("lawlerem/markmodmover")
